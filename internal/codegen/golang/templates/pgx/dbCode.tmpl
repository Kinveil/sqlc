{{define "dbCodeTemplatePgx"}}

type DBTX interface {
	Begin(ctx context.Context) (pgx.Tx, error)
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
{{- if .UsesCopyFrom }}
	CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)
{{- end }}
{{- if .UsesBatch }}
	SendBatch(context.Context, *pgx.Batch) pgx.BatchResults
{{- end }}
}

{{ if .EmitMethodsWithDBArgument}}
func New() *Queries {
	return &Queries{
		ctx: context.Background(),
	}
{{- else -}}
func New(db DBTX) *Queries {
	return &Queries{
		db: db,
		ctx: context.Background(),
	}
{{- end}}
}

type Queries struct {
    {{if not .EmitMethodsWithDBArgument}}
	db DBTX
	ctx context.Context
    {{end}}
}

{{if not .EmitMethodsWithDBArgument}}
func (q *Queries) WithTx() (Querier, pgx.Tx, error) {
	tx, err := q.db.Begin(q.ctx)
	if err != nil {
		return nil, nil, err
	}
	return &Queries{db: tx}, tx, nil
}
{{end}}
{{end}}

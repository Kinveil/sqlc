{{define "copyfromCodePgx"}}
{{range .GoQueries}}
{{if eq .Cmd ":copyfrom" }}
// iteratorFor{{.MethodName}} implements pgx.CopyFromSource.
type iteratorFor{{.MethodName}} struct {
	rows []{{.Arg.DefineType}}
	skippedFirstNextCall bool
}

func (r *iteratorFor{{.MethodName}}) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorFor{{.MethodName}}) Values() ([]interface{}, error) {
	return []interface{}{
{{- if .Arg.Struct }}
{{- range .Arg.Struct.Fields }}
		r.rows[0].{{.Name}},
{{- end }}
{{- else }}
		r.rows[0],
{{- end }}
	}, nil
}

func (r iteratorFor{{.MethodName}}) Err() error {
	return nil
}

{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(db DBTX, {{.Arg.SlicePair}}) (int64, error) {
	// Return early if there are no items to copy
	if len({{.Arg.Name}}) == 0 {
		return 0, nil
	}

	// Sort the batched items by their primary key(s) to reduce the number of deadlocks
	sort.Slice({{.Arg.Name}}, func(i, j int) bool {
        {{range $index, $key := .TablePrimaryKey}}
        if {{$.Arg.Name}}[i].{{$key}} != {{$.Arg.Name}}[j].{{$key}} {
            return {{$.Arg.Name}}[i].{{$key}} < {{$.Arg.Name}}[j].{{$key}}
        }
        {{end}}
        return false
    })

	return db.CopyFrom(q.ctx, {{.TableIdentifierAsGoSlice}}, {{.Arg.ColumnNamesAsGoSlice}}, &iteratorFor{{.MethodName}}{rows: {{.Arg.Name}}})
{{- else -}}
func (q *Queries) {{.MethodName}}({{.Arg.SlicePair}}) (int64, error) {
	// Return early if there are no items to copy
	if len({{.Arg.Name}}) == 0 {
		return 0, nil
	}

	// Sort the batched items by their primary key(s) to reduce the number of deadlocks
	sort.Slice({{.Arg.Name}}, func(i, j int) bool {
        {{range $index, $key := .TablePrimaryKey}}
        if {{$.Arg.Name}}[i].{{$key}} != {{$.Arg.Name}}[j].{{$key}} {
            return {{$.Arg.Name}}[i].{{$key}} < {{$.Arg.Name}}[j].{{$key}}
        }
        {{end}}
        return false
    })

	return q.db.CopyFrom(q.ctx, {{.TableIdentifierAsGoSlice}}, {{.Arg.ColumnNamesAsGoSlice}}, &iteratorFor{{.MethodName}}{rows: {{.Arg.Name}}})
{{- end}}
}

{{end}}
{{end}}
{{end}}
